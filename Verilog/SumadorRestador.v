/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Inversor (
  input B0,
  input B1,
  input B2,
  input B3,
  output \~B0 ,
  output \~B1 ,
  output \~B2 ,
  output \~B3 
);
  assign \~B0  = ~ B0;
  assign \~B1  = ~ B1;
  assign \~B2  = ~ B2;
  assign \~B3  = ~ B3;
endmodule

module Semisumador (
  input A,
  input B,
  output C,
  output S
);
  assign C = (A & B);
  assign S = (A ^ B);
endmodule

module Semisumador_nibble (
  input B0,
  input B1,
  input B2,
  input B3,
  input UNIDAD,
  output S0,
  output S1,
  output S2,
  output S3
);
  wire s4;
  wire s5;
  wire s6;
  Semisumador Semisumador_i0 (
    .A( B0 ),
    .B( UNIDAD ),
    .C( s4 ),
    .S( S0 )
  );
  Semisumador Semisumador_i1 (
    .A( B1 ),
    .B( s4 ),
    .C( s5 ),
    .S( S1 )
  );
  Semisumador Semisumador_i2 (
    .A( B2 ),
    .B( s5 ),
    .C( s6 ),
    .S( S2 )
  );
  Semisumador Semisumador_i3 (
    .A( B3 ),
    .B( s6 ),
    .S( S3 )
  );
endmodule

module Complemento_2 (
  input B0,
  input B1,
  input B2,
  input B3,
  output S0,
  output S1,
  output S2,
  output S3
);
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  Inversor Inversor_i0 (
    .B0( B0 ),
    .B1( B1 ),
    .B2( B2 ),
    .B3( B3 ),
    .\~B0 ( s4 ),
    .\~B1 ( s5 ),
    .\~B2 ( s6 ),
    .\~B3 ( s7 )
  );
  Semisumador_nibble Semisumador_nibble_i1 (
    .B0( s4 ),
    .B1( s5 ),
    .B2( s6 ),
    .B3( s7 ),
    .UNIDAD( 1'b1 ),
    .S0( S0 ),
    .S1( S1 ),
    .S2( S2 ),
    .S3( S3 )
  );
endmodule

module Multiplexor_8_4 (
  input A3,
  input A2,
  input A1,
  input A0,
  input B3,
  input B2,
  input B1,
  input B0,
  output C3,
  output C2,
  output C1,
  output C0
);
  wire s0;
  assign s0 = ~ (B3 | B2 | B1 | B0);
  assign C2 = (A2 & s0);
  assign C1 = (A1 & s0);
  assign C3 = (A3 & s0);
  assign C0 = (A0 & s0);
endmodule

module Sumador (
  input A,
  input B,
  input Cin,
  output C,
  output S
);
  wire s0;
  wire s1;
  wire s2;
  Semisumador Semisumador_i0 (
    .A( A ),
    .B( B ),
    .C( s2 ),
    .S( s0 )
  );
  Semisumador Semisumador_i1 (
    .A( s0 ),
    .B( Cin ),
    .C( s1 ),
    .S( S )
  );
  assign C = (s2 | s1);
endmodule

module Sumador_nibble (
  input A0,
  input B0,
  input A1,
  input B1,
  input A2,
  input B2,
  input A3,
  input B3,
  output S0,
  output S1,
  output S2,
  output S3,
  output Cout
);
  wire s4;
  wire s5;
  wire s6;
  Sumador Sumador_i0 (
    .A( A0 ),
    .B( B0 ),
    .Cin( 1'b0 ),
    .C( s6 ),
    .S( S0 )
  );
  Sumador Sumador_i1 (
    .A( A1 ),
    .B( B1 ),
    .Cin( s6 ),
    .C( s5 ),
    .S( S1 )
  );
  Sumador Sumador_i2 (
    .A( A2 ),
    .B( B2 ),
    .Cin( s5 ),
    .C( s4 ),
    .S( S2 )
  );
  Sumador Sumador_i3 (
    .A( A3 ),
    .B( B3 ),
    .Cin( s4 ),
    .C( Cout ),
    .S( S3 )
  );
endmodule

module Multiplexor_9_4 (
  input A3,
  input A2,
  input A1,
  input A0,
  input B3,
  input B2,
  input B1,
  input B0,
  input Cin,
  output C3,
  output C2,
  output C1,
  output C0
);
  wire s0;
  assign s0 = ~ Cin;
  assign C2 = ((A2 & Cin) | (B2 & s0));
  assign C1 = ((A1 & Cin) | (B1 & s0));
  assign C3 = ((A3 & Cin) | (B3 & s0));
  assign C0 = ((A0 & Cin) | (B0 & s0));
endmodule

module SumadorRestador (
  input B3,
  input A0,
  input A1,
  input A2,
  input A3,
  input B2,
  input B1,
  input B0,
  output S3,
  output S2,
  output S1,
  output S0
);
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire s17;
  wire s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  wire s23;
  wire s24;
  wire s25;
  Complemento_2 Complemento_2_i0 (
    .B0( B0 ),
    .B1( B1 ),
    .B2( B2 ),
    .B3( B3 ),
    .S0( s4 ),
    .S1( s5 ),
    .S2( s6 ),
    .S3( s7 )
  );
  Multiplexor_8_4 Multiplexor_8_4_i1 (
    .A3( A3 ),
    .A2( A2 ),
    .A1( A1 ),
    .A0( A0 ),
    .B3( B3 ),
    .B2( B2 ),
    .B1( B1 ),
    .B0( B0 ),
    .C3( s21 ),
    .C2( s22 ),
    .C1( s23 ),
    .C0( s24 )
  );
  assign s25 = ~ (B0 | B1 | B2 | B3);
  Sumador_nibble Sumador_nibble_i2 (
    .A0( A0 ),
    .B0( s4 ),
    .A1( A1 ),
    .B1( s5 ),
    .A2( A2 ),
    .B2( s6 ),
    .A3( A3 ),
    .B3( s7 ),
    .S0( s8 ),
    .S1( s9 ),
    .S2( s10 ),
    .S3( s11 ),
    .Cout( s12 )
  );
  Complemento_2 Complemento_2_i3 (
    .B0( s8 ),
    .B1( s9 ),
    .B2( s10 ),
    .B3( s11 ),
    .S0( s13 ),
    .S1( s14 ),
    .S2( s15 ),
    .S3( s16 )
  );
  Multiplexor_9_4 Multiplexor_9_4_i4 (
    .A3( s11 ),
    .A2( s10 ),
    .A1( s9 ),
    .A0( s8 ),
    .B3( s16 ),
    .B2( s15 ),
    .B1( s14 ),
    .B0( s13 ),
    .Cin( s12 ),
    .C3( s17 ),
    .C2( s18 ),
    .C1( s19 ),
    .C0( s20 )
  );
  Multiplexor_9_4 Multiplexor_9_4_i5 (
    .A3( s21 ),
    .A2( s22 ),
    .A1( s23 ),
    .A0( s24 ),
    .B3( s17 ),
    .B2( s18 ),
    .B1( s19 ),
    .B0( s20 ),
    .Cin( s25 ),
    .C3( S3 ),
    .C2( S2 ),
    .C1( S1 ),
    .C0( S0 )
  );
endmodule
